package server

import (
	"embed"
	"html/template"
	"io"
	"path/filepath"
	"sort"
	"strings"
	"time"
	"fmt"
	"io/fs"

	"github.com/dustin/go-humanize"
	"github.com/spf13/viper"
	log "github.com/sirupsen/logrus"
	"github.com/gofiber/fiber/v2"
)

//go:embed templates
var templateFiles embed.FS

// Template functions
var funcMap = template.FuncMap{
	"SplitSSHFP":        SplitSSHFP,
	"TimeAgo":           TimeAgo,
	"ConfigValueString": ConfigValueString,
	"ConfigValueBool":   ConfigValueBool,
	"AllowedDomains":    AllowedDomains,
	"BreakNewlines":     BreakNewlines,
	"Translate":         Translate,
}

// Translation functions
var translations map[string]map[string]string

type TemplateRenderer struct {
	templates *template.Template
}

func NewTemplateRenderer() (*TemplateRenderer, error) {
	// Laad vertalingen
	err := LoadTranslations()
	if err != nil {
		return nil, fmt.Errorf("failed to load translations: %w", err)
	}

	tmpl := template.New("")
	tmpl.Funcs(funcMap)
	tmpl, err = tmpl.ParseFS(templateFiles, "templates/*.html")
	if err != nil {
		return nil, err
	}

	if viper.IsSet("site.templates_dir") {
		localTemplatePath := filepath.Join(viper.GetString("site.templates_dir"), "*.html")
		localTemplates, err := filepath.Glob(localTemplatePath)
		if err != nil {
			return nil, err
		}

		if len(localTemplates) > 0 {
			tmpl, err = tmpl.ParseGlob(localTemplatePath)
			if err != nil {
				return nil, err
			}
		}
	}

	tmpl.Funcs(funcMap)

	t := &TemplateRenderer{
		templates: tmpl,
	}

	return t, nil
}

func (t *TemplateRenderer) Load() error {
	return nil
}

//func (t *TemplateRenderer) Render(w io.Writer, name string, data interface{}, layouts ...string) error {
//	return t.templates.ExecuteTemplate(w, name, data)
//}

func (t *TemplateRenderer) Render(w io.Writer, name string, data interface{}, layouts ...string) error {
    var dataMap map[string]interface{}

    // Controleer of de data compatibel is met map[string]interface{}
    switch v := data.(type) {
    case map[string]interface{}:
        dataMap = v
    case fiber.Map:
        dataMap = map[string]interface{}(v)
    default:
        log.Println("WARN: The provided data is not a map[string]interface{}, wrapping in map")
        dataMap = map[string]interface{}{
            "data": data,
        }
    }

    // Verkrijg de standaardtaal uit de configuratie
    defaultLang := "en" // Standaard naar Engels
    if viper.IsSet("site.default_language") {
        defaultLang = viper.GetString("site.default_language")
    }

    // Controleer of de 'lang'-sleutel aanwezig is, zo niet, stel deze in op de standaardtaal
    if lang, exists := dataMap["lang"]; !exists {
        log.Printf("DEBUG: 'lang' key not found, using default language '%s'", defaultLang)
        dataMap["lang"] = defaultLang
    } else {
        log.Debugf("DEBUG: Found 'lang' key with value: %v", lang)
    }

    // Voer de template uit met de bijgewerkte dataMap
    return t.templates.ExecuteTemplate(w, name, dataMap)
}

func AllowedDomains() string {
	allowedDomains := viper.GetStringMapString("accounts.allowed_domains")

	i := 0
	domains := make([]string, len(allowedDomains))
	for d := range allowedDomains {
		domains[i] = d
		i++
	}

	sort.Strings(domains)

	return strings.Join(domains, ", ")
}

func ConfigValueString(key string) string {
	return viper.GetString(key)
}

func ConfigValueBool(key string) bool {
	return viper.GetBool(key)
}

func TimeAgo(t time.Time) string {
	return humanize.Time(t)
}

func SplitSSHFP(fp string) []string {
	if fp == "" {
		return []string{"", "", ""}
	}

	parts := strings.Split(fp, " ")
	if len(parts) == 1 {
		return []string{parts[0], "", ""}
	}

	if len(parts) == 2 {
		return []string{parts[0], parts[1], ""}
	}

	parts[2] = strings.TrimLeft(parts[2], "(")
	parts[2] = strings.TrimRight(parts[2], ")")
	return parts
}

func BreakNewlines(s string) template.HTML {
	return template.HTML(strings.Replace(template.HTMLEscapeString(s), "\n", "<br />", -1))
}

func LoadTranslations() error {
    translationsDir := viper.GetString("site.translations_dir")
    if translationsDir == "" {
        return fmt.Errorf("translations directory is not configured")
    }

    log.Debugf("Attempting to load translations from directory: %s", translationsDir)

    translations = make(map[string]map[string]string)

    err := filepath.WalkDir(translationsDir, func(path string, d fs.DirEntry, err error) error {
        if err != nil {
            log.Errorf("Error accessing file or directory %s: %v", path, err)
            return err
        }
        if !d.IsDir() && strings.HasSuffix(d.Name(), ".toml") {
            log.Debugf("Found translation file: %s", path)

            lang := strings.TrimSuffix(d.Name(), ".toml")
            v := viper.New()
            v.SetConfigFile(path)
            v.SetConfigType("toml")

            if err := v.ReadInConfig(); err != nil {
                log.Errorf("Failed to parse translation file %s: %v", path, err)
                return fmt.Errorf("failed to parse translation file %s: %w", path, err)
            }

            langTranslations := make(map[string]string)
            for _, key := range v.AllKeys() {
                langTranslations[key] = v.GetString(key)
            }

            translations[lang] = langTranslations
            log.Debugf("Loaded translations for language %s", lang)
        }
        return nil
    })

    if err != nil {
        log.Errorf("Failed to load translations: %v", err)
        return fmt.Errorf("failed to load translations: %w", err)
    }

    defaultLang := viper.GetString("site.default_language")
    if defaultLang == "" {
        defaultLang = "en"
        log.Warnf("No default language configured, using 'en' as fallback.")
    }

    if _, exists := translations[defaultLang]; !exists {
        log.Warnf("No translations found for default language '%s', using 'en' as fallback.", defaultLang)
        defaultLang = "en"
    }

    log.Infof("Using default language '%s' for fallback.", defaultLang)
    return nil
}

func Translate(lang, key string) string {
    // Use the provided language, or default to the site's configured language
    if lang == "" {
        lang = viper.GetString("site.default_language")
        if lang == "" {
            // Fallback to "en" if no default language is configured
            lang = "en"
        }
    }

    // Look for the translation in the specified language
    if langTranslations, ok := translations[lang]; ok {
        if value, ok := langTranslations[key]; ok {
            return value
        }
        log.Warnf("Translation key '%s' not found in language '%s'", key, lang)
    } else {
        log.Warnf("No translations found for language '%s'", lang)
    }

    // If not found, look in the default language as a fallback
    defaultLang := viper.GetString("site.default_language")
    if defaultLang == "" {
        // Fallback to "en" if no default language is configured
        defaultLang = "en"
    }

    if lang != defaultLang {
        if defaultLangTranslations, ok := translations[defaultLang]; ok {
            if value, ok := defaultLangTranslations[key]; ok {
                return value
            }
            log.Warnf("Translation key '%s' not found in default language '%s'", key, defaultLang)
        }
    }

    // If no translation is found, return the key as a fallback
    log.Warnf("Falling back to key '%s' as translation", key)
    return key
}
